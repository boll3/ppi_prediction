%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.41.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 495 393
%%HiResBoundingBox: 0 0 495 393
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font T3_8_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-1021 -416 1681 1167] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 39 dict def
CharProcs begin
/parenright {
390 0 80 -131 304 759 setcachedevice
q
80 759 m
158 759 l
206 682 243 607 267 533 c
291 459 304 386 304 314 c
304 241 291 168 267 94 c
243 20 206 -54 158 -131 c
80 -131 l
123 -56 155 17 177 91 c
198 164 209 238 209 314 c
209 389 198 463 177 536 c
155 609 123 683 80 759 c
f
Q
} def
/seven {
636 0 82 0 551 729 setcachedevice
q
82 729 m
551 729 l
551 687 l
286 0 l
183 0 l
432 646 l
82 646 l
82 729 l
f
Q
} def
/period {
318 0 107 0 210 124 setcachedevice
q
107 0 103 124 re
f
Q
} def
/one {
636 0 110 0 544 729 setcachedevice
q
124 83 m
285 83 l
285 639 l
110 604 l
110 694 l
284 729 l
383 729 l
383 83 l
544 83 l
544 0 l
124 0 l
124 83 l
f
Q
} def
/four {
636 0 49 0 580 729 setcachedevice
q
378 643 m
129 254 l
378 254 l
378 643 l
352 729 m
476 729 l
476 254 l
580 254 l
580 172 l
476 172 l
476 0 l
378 0 l
378 172 l
49 172 l
49 267 l
352 729 l
f
Q
} def
/zero {
636 0 66 -13 570 742 setcachedevice
q
318 664 m
267 664 229 639 203 589 c
177 539 165 464 165 364 c
165 264 177 189 203 139 c
229 89 267 64 318 64 c
369 64 407 89 433 139 c
458 189 471 264 471 364 c
471 464 458 539 433 589 c
407 639 369 664 318 664 c
318 742 m
399 742 461 709 505 645 c
548 580 570 486 570 364 c
570 241 548 147 505 83 c
461 19 399 -13 318 -13 c
236 -13 173 19 130 83 c
87 147 66 241 66 364 c
66 486 87 580 130 645 c
173 709 236 742 318 742 c
f
Q
} def
/parenleft {
390 0 86 -131 310 759 setcachedevice
q
310 759 m
266 683 234 609 213 536 c
191 463 181 389 181 314 c
181 238 191 164 213 91 c
234 17 266 -56 310 -131 c
232 -131 l
183 -54 146 20 122 94 c
98 168 86 241 86 314 c
86 386 98 459 122 533 c
146 607 182 682 232 759 c
310 759 l
f
Q
} def
/space {
318 0 0 0 0 0 setcachedevice
q
Q
} def
/six {
636 0 70 -13 573 742 setcachedevice
q
330 404 m
286 404 251 388 225 358 c
199 328 186 286 186 234 c
186 181 199 139 225 109 c
251 79 286 64 330 64 c
374 64 409 79 435 109 c
461 139 474 181 474 234 c
474 286 461 328 435 358 c
409 388 374 404 330 404 c
526 713 m
526 623 l
501 635 476 644 451 650 c
425 656 400 659 376 659 c
310 659 260 637 226 593 c
192 549 172 482 168 394 c
187 422 211 444 240 459 c
269 474 301 482 336 482 c
409 482 467 459 509 415 c
551 371 573 310 573 234 c
573 159 550 99 506 54 c
462 9 403 -13 330 -13 c
246 -13 181 19 137 83 c
92 147 70 241 70 364 c
70 479 97 571 152 639 c
206 707 280 742 372 742 c
396 742 421 739 447 735 c
472 730 498 723 526 713 c
f
Q
} def
/two {
636 0 73 0 536 742 setcachedevice
q
192 83 m
536 83 l
536 0 l
73 0 l
73 83 l
110 121 161 173 226 239 c
290 304 331 346 348 365 c
380 400 402 430 414 455 c
426 479 433 504 433 528 c
433 566 419 598 392 622 c
365 646 330 659 286 659 c
255 659 222 653 188 643 c
154 632 117 616 78 594 c
78 694 l
118 710 155 722 189 730 c
223 738 255 742 284 742 c
359 742 419 723 464 685 c
509 647 532 597 532 534 c
532 504 526 475 515 449 c
504 422 484 390 454 354 c
446 344 420 317 376 272 c
332 227 271 164 192 83 c
f
Q
} def
/equal {
838 0 106 172 732 454 setcachedevice
q
106 454 m
732 454 l
732 372 l
106 372 l
106 454 l
106 255 m
732 255 l
732 172 l
106 172 l
106 255 l
f
Q
} def
/nine {
636 0 63 -13 566 742 setcachedevice
q
110 15 m
110 105 l
134 93 159 84 185 78 c
210 72 235 69 260 69 c
324 69 374 90 408 134 c
442 178 462 244 468 334 c
448 306 424 284 396 269 c
367 254 335 247 300 247 c
226 247 168 269 126 313 c
84 357 63 417 63 494 c
63 568 85 628 129 674 c
173 719 232 742 306 742 c
390 742 455 709 499 645 c
543 580 566 486 566 364 c
566 248 538 157 484 89 c
429 21 356 -13 264 -13 c
239 -13 214 -10 189 -6 c
163 -2 137 5 110 15 c
306 324 m
350 324 385 339 411 369 c
437 399 450 441 450 494 c
450 546 437 588 411 618 c
385 648 350 664 306 664 c
262 664 227 648 201 618 c
175 588 162 546 162 494 c
162 441 175 399 201 369 c
227 339 262 324 306 324 c
f
Q
} def
/A {
684 0 8 0 676 729 setcachedevice
q
342 632 m
208 269 l
476 269 l
342 632 l
286 729 m
398 729 l
676 0 l
573 0 l
507 187 l
178 187 l
112 0 l
8 0 l
286 729 l
f
Q
} def
/C {
698 0 56 -13 644 742 setcachedevice
q
644 673 m
644 569 l
610 599 575 622 537 638 c
499 653 460 661 418 661 c
334 661 270 635 226 584 c
182 533 160 460 160 364 c
160 268 182 194 226 143 c
270 92 334 67 418 67 c
460 67 499 74 537 90 c
575 105 610 128 644 159 c
644 56 l
609 32 572 15 534 4 c
496 -7 455 -13 412 -13 c
302 -13 215 20 151 87 c
87 154 56 246 56 364 c
56 481 87 573 151 641 c
215 708 302 742 412 742 c
456 742 497 736 535 725 c
573 713 610 696 644 673 c
f
Q
} def
/F {
575 0 98 0 517 729 setcachedevice
q
98 729 m
517 729 l
517 646 l
197 646 l
197 431 l
486 431 l
486 348 l
197 348 l
197 0 l
98 0 l
98 729 l
f
Q
} def
/I {
295 0 98 0 197 729 setcachedevice
q
98 0 99 729 re
f
Q
} def
/O {
787 0 56 -13 731 742 setcachedevice
q
394 662 m
322 662 265 635 223 582 c
181 528 160 456 160 364 c
160 272 181 199 223 146 c
265 92 322 66 394 66 c
465 66 522 92 564 146 c
606 199 627 272 627 364 c
627 456 606 528 564 582 c
522 635 465 662 394 662 c
394 742 m
496 742 577 707 639 639 c
700 571 731 479 731 364 c
731 248 700 157 639 89 c
577 21 496 -13 394 -13 c
291 -13 209 21 148 89 c
86 157 56 248 56 364 c
56 479 86 571 148 639 c
209 707 291 742 394 742 c
f
Q
} def
/P {
603 0 98 0 569 729 setcachedevice
q
197 648 m
197 374 l
321 374 l
367 374 402 385 427 409 c
452 433 465 467 465 511 c
465 555 452 588 427 612 c
402 636 367 648 321 648 c
197 648 l
98 729 m
321 729 l
402 729 464 710 506 673 c
548 636 569 582 569 511 c
569 439 548 384 506 348 c
464 311 402 293 321 293 c
197 293 l
197 0 l
98 0 l
98 729 l
f
Q
} def
/S {
635 0 66 -13 579 742 setcachedevice
q
535 705 m
535 609 l
497 627 462 640 429 649 c
395 657 363 662 333 662 c
279 662 237 651 208 631 c
179 610 165 580 165 542 c
165 510 174 485 194 469 c
213 452 250 439 304 429 c
364 417 l
437 403 491 378 526 343 c
561 307 579 260 579 201 c
579 130 555 77 508 41 c
460 5 391 -13 300 -13 c
265 -13 228 -9 189 -2 c
150 5 110 16 69 32 c
69 134 l
109 111 148 94 186 83 c
224 71 262 66 300 66 c
356 66 399 77 430 99 c
460 121 476 152 476 194 c
476 230 465 258 443 278 c
421 298 385 313 335 323 c
275 335 l
201 349 148 372 115 404 c
82 435 66 478 66 534 c
66 598 88 649 134 686 c
179 723 242 742 322 742 c
356 742 390 739 426 733 c
461 727 497 717 535 705 c
f
Q
} def
/R {
695 0 98 0 666 729 setcachedevice
q
444 342 m
465 334 486 319 506 296 c
526 272 546 240 566 199 c
666 0 l
560 0 l
467 187 l
443 235 419 268 397 284 c
374 300 343 308 304 308 c
197 308 l
197 0 l
98 0 l
98 729 l
321 729 l
404 729 466 711 507 677 c
548 642 569 589 569 519 c
569 473 558 434 537 404 c
515 374 484 353 444 342 c
197 648 m
197 389 l
321 389 l
368 389 404 400 428 422 c
452 444 465 476 465 519 c
465 561 452 593 428 615 c
404 637 368 648 321 648 c
197 648 l
f
Q
} def
/eight {
636 0 68 -13 568 742 setcachedevice
q
318 346 m
271 346 234 333 207 308 c
180 283 167 249 167 205 c
167 161 180 126 207 101 c
234 76 271 64 318 64 c
364 64 401 76 428 102 c
455 127 469 161 469 205 c
469 249 455 283 429 308 c
402 333 365 346 318 346 c
219 388 m
177 398 144 418 120 447 c
96 476 85 511 85 553 c
85 611 105 657 147 691 c
188 725 245 742 318 742 c
390 742 447 725 489 691 c
530 657 551 611 551 553 c
551 511 539 476 515 447 c
491 418 459 398 417 388 c
464 377 501 355 528 323 c
554 291 568 251 568 205 c
568 134 546 80 503 43 c
459 5 398 -13 318 -13 c
237 -13 175 5 132 43 c
89 80 68 134 68 205 c
68 251 81 291 108 323 c
134 355 171 377 219 388 c
183 544 m
183 506 194 476 218 455 c
242 434 275 424 318 424 c
360 424 393 434 417 455 c
441 476 453 506 453 544 c
453 582 441 611 417 632 c
393 653 360 664 318 664 c
275 664 242 653 218 632 c
194 611 183 582 183 544 c
f
Q
} def
/T {
611 0 -2 0 614 729 setcachedevice
q
-2 729 m
614 729 l
614 646 l
355 646 l
355 0 l
256 0 l
256 646 l
-2 646 l
-2 729 l
f
Q
} def
/a {
613 0 60 -13 522 560 setcachedevice
q
343 275 m
270 275 220 266 192 250 c
164 233 150 205 150 165 c
150 133 160 107 181 89 c
202 70 231 61 267 61 c
317 61 357 78 387 114 c
417 149 432 196 432 255 c
432 275 l
343 275 l
522 312 m
522 0 l
432 0 l
432 83 l
411 49 385 25 355 10 c
325 -5 287 -13 243 -13 c
187 -13 142 2 109 33 c
76 64 60 106 60 159 c
60 220 80 266 122 298 c
163 329 224 345 306 345 c
432 345 l
432 354 l
432 395 418 427 391 450 c
364 472 326 484 277 484 c
245 484 215 480 185 472 c
155 464 127 453 100 439 c
100 522 l
132 534 164 544 195 550 c
226 556 256 560 286 560 c
365 560 424 539 463 498 c
502 457 522 395 522 312 c
f
Q
} def
/c {
550 0 55 -13 488 560 setcachedevice
q
488 526 m
488 442 l
462 456 437 466 411 473 c
385 480 360 484 334 484 c
276 484 230 465 198 428 c
166 391 150 339 150 273 c
150 206 166 154 198 117 c
230 80 276 62 334 62 c
360 62 385 65 411 72 c
437 79 462 90 488 104 c
488 21 l
462 9 436 0 410 -5 c
383 -10 354 -13 324 -13 c
242 -13 176 12 128 64 c
79 115 55 185 55 273 c
55 362 79 432 128 483 c
177 534 244 560 330 560 c
358 560 385 557 411 551 c
437 545 463 537 488 526 c
f
Q
} def
/e {
615 0 55 -13 562 560 setcachedevice
q
562 296 m
562 252 l
149 252 l
153 190 171 142 205 110 c
238 78 284 62 344 62 c
378 62 412 66 444 74 c
476 82 509 95 541 113 c
541 28 l
509 14 476 3 442 -3 c
408 -9 373 -13 339 -13 c
251 -13 182 12 131 62 c
80 112 55 181 55 268 c
55 357 79 428 127 481 c
175 533 241 560 323 560 c
397 560 455 536 498 489 c
540 441 562 377 562 296 c
472 322 m
471 371 457 410 431 440 c
404 469 368 484 324 484 c
274 484 234 469 204 441 c
174 413 156 373 152 322 c
472 322 l
f
Q
} def
/g {
635 0 55 -207 544 560 setcachedevice
q
454 280 m
454 344 440 395 414 431 c
387 467 349 485 301 485 c
253 485 215 467 188 431 c
161 395 148 344 148 280 c
148 215 161 165 188 129 c
215 93 253 75 301 75 c
349 75 387 93 414 129 c
440 165 454 215 454 280 c
544 68 m
544 -24 523 -93 482 -139 c
440 -184 377 -207 292 -207 c
260 -207 231 -204 203 -200 c
175 -195 147 -188 121 -178 c
121 -91 l
147 -105 173 -115 199 -122 c
225 -129 251 -133 278 -133 c
336 -133 380 -117 410 -87 c
439 -56 454 -10 454 52 c
454 96 l
435 64 411 40 382 24 c
353 8 319 0 279 0 c
211 0 157 25 116 76 c
75 127 55 195 55 280 c
55 364 75 432 116 483 c
157 534 211 560 279 560 c
319 560 353 552 382 536 c
411 520 435 496 454 464 c
454 547 l
544 547 l
544 68 l
f
Q
} def
/i {
278 0 94 0 184 760 setcachedevice
q
94 547 m
184 547 l
184 0 l
94 0 l
94 547 l
94 760 m
184 760 l
184 646 l
94 646 l
94 760 l
f
Q
} def
/h {
634 0 91 0 549 760 setcachedevice
q
549 330 m
549 0 l
459 0 l
459 327 l
459 379 448 417 428 443 c
408 469 378 482 338 482 c
289 482 251 466 223 435 c
195 404 181 362 181 309 c
181 0 l
91 0 l
91 760 l
181 760 l
181 462 l
202 494 227 519 257 535 c
286 551 320 560 358 560 c
420 560 468 540 500 501 c
532 462 549 405 549 330 c
f
Q
} def
/m {
974 0 91 0 889 560 setcachedevice
q
520 442 m
542 482 569 511 600 531 c
631 550 668 560 711 560 c
767 560 811 540 842 500 c
873 460 889 403 889 330 c
889 0 l
799 0 l
799 327 l
799 379 789 418 771 444 c
752 469 724 482 686 482 c
639 482 602 466 575 435 c
548 404 535 362 535 309 c
535 0 l
445 0 l
445 327 l
445 379 435 418 417 444 c
398 469 369 482 331 482 c
285 482 248 466 221 435 c
194 404 181 362 181 309 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
201 495 226 520 255 536 c
283 552 317 560 357 560 c
397 560 430 550 458 530 c
486 510 506 480 520 442 c
f
Q
} def
/l {
278 0 94 0 184 760 setcachedevice
q
94 0 90 760 re
f
Q
} def
/o {
612 0 55 -13 557 560 setcachedevice
q
306 484 m
258 484 220 465 192 427 c
164 389 150 338 150 273 c
150 207 163 156 191 118 c
219 80 257 62 306 62 c
354 62 392 80 420 118 c
448 156 462 207 462 273 c
462 337 448 389 420 427 c
392 465 354 484 306 484 c
306 560 m
384 560 445 534 490 484 c
534 433 557 363 557 273 c
557 183 534 113 490 63 c
445 12 384 -13 306 -13 c
227 -13 165 12 121 63 c
77 113 55 183 55 273 c
55 363 77 433 121 484 c
165 534 227 560 306 560 c
f
Q
} def
/n {
634 0 91 0 549 560 setcachedevice
q
549 330 m
549 0 l
459 0 l
459 327 l
459 379 448 417 428 443 c
408 469 378 482 338 482 c
289 482 251 466 223 435 c
195 404 181 362 181 309 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
202 494 227 519 257 535 c
286 551 320 560 358 560 c
420 560 468 540 500 501 c
532 462 549 405 549 330 c
f
Q
} def
/p {
635 0 91 -207 580 560 setcachedevice
q
181 82 m
181 -207 l
91 -207 l
91 547 l
181 547 l
181 464 l
199 496 223 520 252 536 c
281 552 316 560 356 560 c
422 560 476 533 518 481 c
559 428 580 359 580 273 c
580 187 559 117 518 65 c
476 13 422 -13 356 -13 c
316 -13 281 -5 252 10 c
223 25 199 49 181 82 c
487 273 m
487 339 473 390 446 428 c
418 466 381 485 334 485 c
286 485 249 466 222 428 c
194 390 181 339 181 273 c
181 207 194 155 222 117 c
249 79 286 61 334 61 c
381 61 418 79 446 117 c
473 155 487 207 487 273 c
f
Q
} def
/s {
521 0 54 -13 472 560 setcachedevice
q
443 531 m
443 446 l
417 458 391 468 364 475 c
336 481 308 485 279 485 c
234 485 200 478 178 464 c
156 450 145 430 145 403 c
145 382 153 366 169 354 c
185 342 217 330 265 320 c
296 313 l
360 299 405 279 432 255 c
458 230 472 195 472 151 c
472 100 452 60 412 31 c
372 1 316 -13 246 -13 c
216 -13 186 -10 154 -5 c
122 0 89 8 54 20 c
54 113 l
87 95 120 82 152 74 c
184 65 216 61 248 61 c
290 61 323 68 346 82 c
368 96 380 117 380 144 c
380 168 371 187 355 200 c
339 213 303 226 247 238 c
216 245 l
160 257 119 275 95 299 c
70 323 58 356 58 399 c
58 450 76 490 112 518 c
148 546 200 560 268 560 c
301 560 332 557 362 552 c
391 547 418 540 443 531 c
f
Q
} def
/r {
411 0 91 0 411 560 setcachedevice
q
411 463 m
401 469 390 473 378 476 c
366 478 353 480 339 480 c
288 480 249 463 222 430 c
194 397 181 350 181 288 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
199 495 224 520 254 536 c
284 552 321 560 365 560 c
371 560 378 559 386 559 c
393 558 401 557 411 555 c
411 463 l
f
Q
} def
/u {
634 0 85 -13 543 560 setcachedevice
q
85 216 m
85 547 l
175 547 l
175 219 l
175 167 185 129 205 103 c
225 77 255 64 296 64 c
344 64 383 79 411 110 c
439 141 453 183 453 237 c
453 547 l
543 547 l
543 0 l
453 0 l
453 84 l
431 50 405 26 377 10 c
348 -5 315 -13 277 -13 c
214 -13 166 6 134 45 c
101 83 85 140 85 216 c
311 560 m
311 560 l
f
Q
} def
/t {
392 0 27 0 368 702 setcachedevice
q
183 702 m
183 547 l
368 547 l
368 477 l
183 477 l
183 180 l
183 135 189 106 201 94 c
213 81 238 75 276 75 c
368 75 l
368 0 l
276 0 l
206 0 158 13 132 39 c
106 65 93 112 93 180 c
93 477 l
27 477 l
27 547 l
93 547 l
93 702 l
183 702 l
f
Q
} def
/v {
592 0 30 0 562 547 setcachedevice
q
30 547 m
125 547 l
296 88 l
467 547 l
562 547 l
357 0 l
235 0 l
30 547 l
f
Q
} def
/U {
732 0 87 -13 645 729 setcachedevice
q
87 729 m
186 729 l
186 286 l
186 208 200 151 228 117 c
256 83 302 66 366 66 c
429 66 475 83 503 117 c
531 151 546 208 546 286 c
546 729 l
645 729 l
645 274 l
645 178 621 107 574 59 c
527 11 458 -13 366 -13 c
274 -13 204 11 157 59 c
110 107 87 178 87 274 c
87 729 l
f
Q
} def
end
currentdict end
/T3_8_0 exch definefont pop
%%EndResource
/F8_0 /T3_8_0 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 495 393 re
W
q
q
[1 0 0 1 -7 -9] cm
q
[1 0 0 1 0 0] cm
0 0 507.542188 407.890625 re
W
1 j
/DeviceGray {} cs
[1] sc
0 w
/DeviceGray {} CS
[1] SC
0 0 507.542188 407.890625 re
f
/DeviceGray {} CS
[0] SC
45.45 39.45 446.4 345.6 re
f
q
45.45 39.45 446.4 345.6 re
W
2 J
1 w
/DeviceRGB {} CS
[0 0 1] SC
45.45 39.45 m
61.493975 61.093636 l
65.269027 68.773636 l
65.269027 71.566364 l
68.100317 74.359091 l
69.04408 75.755455 l
70.931607 75.755455 l
71.87537 77.151818 l
72.819133 79.246364 l
74.70666 82.039091 l
75.650423 82.737273 l
76.594186 84.831818 l
77.537949 84.831818 l
77.537949 85.53 l
78.481712 86.228182 l
79.425476 87.624545 l
80.369239 87.624545 l
80.369239 89.719091 l
82.256765 89.719091 l
85.088055 91.813636 l
85.088055 92.511818 l
86.975581 93.21 l
86.975581 93.908182 l
90.750634 93.908182 l
90.750634 94.606364 l
91.694397 94.606364 l
91.694397 95.304545 l
92.638161 95.304545 l
92.638161 96.002727 l
93.581924 96.002727 l
93.581924 96.700909 l
94.525687 96.700909 l
94.525687 100.191818 l
96.413214 100.89 l
97.356977 101.588182 l
97.356977 102.286364 l
98.30074 102.984545 l
98.30074 103.682727 l
99.244503 103.682727 l
99.244503 106.475455 l
100.188266 107.173636 l
100.188266 109.268182 l
101.13203 109.268182 l
101.13203 111.362727 l
105.850846 111.362727 l
105.850846 112.060909 l
106.794609 112.060909 l
106.794609 113.457273 l
107.738372 113.457273 l
107.738372 116.25 l
108.682135 116.25 l
108.682135 121.137273 l
110.569662 121.137273 l
110.569662 122.533636 l
112.457188 122.533636 l
112.457188 123.231818 l
113.400951 123.231818 l
113.400951 123.93 l
114.344715 123.93 l
114.344715 125.326364 l
115.288478 125.326364 l
115.288478 128.119091 l
116.232241 128.119091 l
116.232241 128.817273 l
118.119767 128.817273 l
118.119767 133.006364 l
122.838584 133.006364 l
122.838584 135.799091 l
123.782347 135.799091 l
123.782347 136.497273 l
125.669873 136.497273 l
125.669873 137.893636 l
126.613636 137.893636 l
126.613636 138.591818 l
127.5574 138.591818 l
127.5574 139.29 l
128.501163 139.29 l
128.501163 141.384545 l
129.444926 141.384545 l
129.444926 144.177273 l
130.388689 144.177273 l
130.388689 145.573636 l
131.332452 145.573636 l
131.332452 146.271818 l
132.276216 146.271818 l
132.276216 148.366364 l
133.219979 148.366364 l
133.219979 149.064545 l
134.163742 149.064545 l
134.163742 149.762727 l
135.107505 149.762727 l
135.107505 151.857273 l
136.051268 151.857273 l
136.051268 155.348182 l
136.995032 155.348182 l
136.995032 162.33 l
137.938795 162.33 l
137.938795 163.028182 l
138.882558 163.028182 l
138.882558 298.475455 l
139.826321 298.475455 l
139.826321 301.966364 l
141.713848 301.966364 l
141.713848 302.664545 l
142.657611 302.664545 l
142.657611 306.853636 l
143.601374 307.551818 l
143.601374 308.25 l
144.545137 308.25 l
144.545137 311.042727 l
145.488901 311.042727 l
145.488901 313.835455 l
146.432664 313.835455 l
146.432664 314.533636 l
148.32019 314.533636 l
148.32019 317.326364 l
151.15148 317.326364 l
151.15148 318.024545 l
152.095243 318.024545 l
152.095243 320.817273 l
153.039006 320.817273 l
153.039006 322.213636 l
153.98277 322.213636 l
153.98277 322.911818 l
154.926533 322.911818 l
154.926533 323.61 l
155.870296 323.61 l
155.870296 324.308182 l
156.814059 324.308182 l
156.814059 327.799091 l
158.701586 327.799091 l
158.701586 329.195455 l
160.589112 329.195455 l
160.589112 329.893636 l
161.532875 329.893636 l
161.532875 331.29 l
166.251691 331.29 l
166.251691 331.988182 l
168.139218 331.988182 l
168.139218 334.780909 l
170.026744 334.780909 l
170.026744 335.479091 l
173.801797 335.479091 l
173.801797 336.177273 l
176.633087 336.177273 l
176.633087 336.875455 l
177.57685 336.875455 l
177.57685 337.573636 l
178.520613 337.573636 l
178.520613 338.271818 l
183.239429 338.271818 l
183.239429 338.97 l
186.070719 338.97 l
186.070719 340.366364 l
190.789535 340.366364 l
190.789535 341.762727 l
192.677061 341.762727 l
192.677061 342.460909 l
196.452114 342.460909 l
196.452114 343.857273 l
198.339641 343.857273 l
198.339641 344.555455 l
200.227167 344.555455 l
200.227167 345.951818 l
203.058457 345.951818 l
203.058457 346.65 l
216.271142 346.65 l
216.271142 347.348182 l
220.046195 347.348182 l
220.046195 348.744545 l
231.371353 348.744545 l
231.371353 349.442727 l
234.202643 349.442727 l
234.202643 350.140909 l
237.977696 350.140909 l
237.977696 351.537273 l
246.471564 351.537273 l
246.471564 352.235455 l
250.246617 352.235455 l
250.246617 352.933636 l
253.077907 352.933636 l
253.077907 353.631818 l
254.02167 353.631818 l
254.02167 354.33 l
255.909197 354.33 l
255.909197 355.028182 l
259.684249 355.028182 l
259.684249 355.726364 l
273.840698 355.726364 l
273.840698 356.424545 l
279.503277 356.424545 l
279.503277 357.820909 l
285.165856 357.820909 l
285.165856 358.519091 l
286.109619 358.519091 l
286.109619 360.613636 l
292.715962 360.613636 l
292.715962 361.311818 l
299.322304 361.311818 l
299.322304 362.01 l
304.984884 362.01 l
304.984884 364.104545 l
311.591226 364.104545 l
311.591226 365.500909 l
312.534989 365.500909 l
312.534989 366.199091 l
322.916385 366.199091 l
322.916385 366.897273 l
324.803911 366.897273 l
324.803911 367.595455 l
326.691438 367.595455 l
326.691438 368.991818 l
327.635201 368.991818 l
327.635201 369.69 l
332.354017 369.69 l
332.354017 370.388182 l
341.791649 370.388182 l
341.791649 371.086364 l
343.679175 371.086364 l
343.679175 371.784545 l
365.385729 371.784545 l
365.385729 372.482727 l
368.217019 372.482727 l
368.217019 373.180909 l
369.160782 373.180909 l
369.160782 373.879091 l
372.935835 373.879091 l
372.935835 374.577273 l
373.879598 374.577273 l
373.879598 375.275455 l
375.767125 375.275455 l
375.767125 375.973636 l
381.429704 375.973636 l
381.429704 376.671818 l
384.260994 376.671818 l
384.260994 377.37 l
391.811099 377.37 l
391.811099 378.068182 l
396.529915 378.068182 l
396.529915 378.766364 l
400.304968 378.766364 l
400.304968 379.464545 l
407.855074 379.464545 l
407.855074 380.162727 l
422.955285 380.162727 l
422.955285 380.860909 l
424.842812 380.860909 l
424.842812 381.559091 l
433.336681 381.559091 l
433.336681 382.257273 l
454.099471 382.257273 l
454.099471 382.955455 l
462.59334 382.955455 l
462.59334 383.653636 l
464.480867 383.653636 l
464.480867 384.351818 l
487.131184 384.351818 l
487.131184 385.05 l
491.85 385.05 l
491.85 385.05 l
S
Q
q
45.45 39.45 446.4 345.6 re
W
2 J
1 w
/DeviceRGB {} CS
[1 0 0] SC
45.45 40.148182 m
45.45 100.89 l
46.393763 101.588182 l
46.393763 165.122727 l
47.337526 166.519091 l
47.337526 182.577273 l
48.28129 183.973636 l
48.28129 190.955455 l
49.225053 191.653636 l
49.225053 204.220909 l
50.168816 204.919091 l
51.112579 207.013636 l
52.056342 207.013636 l
52.056342 225.166364 l
53.000106 226.562727 l
53.000106 228.657273 l
53.943869 230.053636 l
53.943869 239.13 l
54.887632 239.828182 l
54.887632 243.319091 l
55.831395 244.017273 l
55.831395 244.715455 l
56.775159 246.81 l
57.718922 247.508182 l
58.662685 247.508182 l
60.550211 248.206364 l
62.437738 250.300909 l
62.437738 252.395455 l
63.381501 253.093636 l
63.381501 254.49 l
64.325264 255.886364 l
66.212791 256.584545 l
66.212791 258.679091 l
67.156554 259.377273 l
69.04408 260.075455 l
69.04408 260.773636 l
69.987844 264.264545 l
69.987844 267.755455 l
71.87537 269.151818 l
71.87537 277.53 l
72.819133 278.228182 l
72.819133 282.417273 l
73.762896 283.115455 l
75.650423 283.115455 l
75.650423 285.908182 l
77.537949 287.304545 l
77.537949 290.795455 l
78.481712 290.795455 l
79.425476 292.191818 l
79.425476 292.89 l
80.369239 293.588182 l
80.369239 295.682727 l
83.200529 295.682727 l
83.200529 297.777273 l
85.088055 299.173636 l
85.088055 300.57 l
86.975581 303.362727 l
86.975581 311.740909 l
89.806871 312.439091 l
90.750634 313.137273 l
90.750634 314.533636 l
93.581924 315.93 l
95.46945 316.628182 l
95.46945 322.213636 l
97.356977 325.006364 l
97.356977 326.402727 l
98.30074 327.100909 l
98.30074 328.497273 l
99.244503 329.195455 l
99.244503 330.591818 l
100.188266 330.591818 l
101.13203 331.29 l
101.13203 331.988182 l
102.075793 333.384545 l
103.019556 334.082727 l
103.019556 334.780909 l
103.963319 334.780909 l
103.963319 335.479091 l
104.907082 335.479091 l
104.907082 336.177273 l
107.738372 336.177273 l
107.738372 336.875455 l
110.569662 338.271818 l
111.513425 338.271818 l
112.457188 338.97 l
114.344715 338.97 l
114.344715 340.366364 l
115.288478 340.366364 l
116.232241 341.064545 l
117.176004 341.064545 l
117.176004 341.762727 l
118.119767 342.460909 l
118.119767 344.555455 l
119.063531 344.555455 l
120.007294 345.253636 l
128.501163 345.253636 l
130.388689 346.65 l
133.219979 348.046364 l
133.219979 348.744545 l
134.163742 349.442727 l
134.163742 350.140909 l
136.995032 350.140909 l
136.995032 351.537273 l
137.938795 351.537273 l
140.770085 353.631818 l
140.770085 355.028182 l
143.601374 356.424545 l
144.545137 357.122727 l
145.488901 357.122727 l
145.488901 357.820909 l
146.432664 358.519091 l
148.32019 358.519091 l
150.207717 359.915455 l
151.15148 359.915455 l
151.15148 360.613636 l
152.095243 360.613636 l
152.095243 361.311818 l
153.98277 361.311818 l
156.814059 362.01 l
159.645349 362.01 l
161.532875 363.406364 l
164.364165 363.406364 l
166.251691 364.104545 l
171.914271 364.104545 l
171.914271 364.802727 l
173.801797 364.802727 l
175.689323 366.199091 l
185.126956 366.199091 l
187.958245 368.293636 l
190.789535 368.293636 l
192.677061 368.991818 l
197.395877 368.991818 l
197.395877 369.69 l
199.283404 371.086364 l
199.283404 372.482727 l
200.227167 373.180909 l
206.83351 373.180909 l
209.664799 373.879091 l
210.608562 373.879091 l
216.271142 375.275455 l
220.046195 375.275455 l
221.933721 375.973636 l
222.877484 375.973636 l
224.765011 376.671818 l
225.708774 377.37 l
237.033932 377.37 l
237.977696 378.766364 l
240.808985 378.766364 l
241.752748 379.464545 l
258.740486 379.464545 l
259.684249 380.162727 l
260.628013 380.162727 l
261.571776 380.860909 l
264.403066 380.860909 l
267.234355 381.559091 l
280.44704 381.559091 l
281.390803 382.257273 l
285.165856 382.257273 l
286.109619 382.955455 l
347.454228 382.955455 l
348.397992 383.653636 l
376.710888 383.653636 l
380.485941 384.351818 l
412.57389 384.351818 l
413.517653 385.05 l
491.85 385.05 l
491.85 385.05 l
S
Q
q
45.45 39.45 446.4 345.6 re
W
1 w
[6 6] 0 d
/DeviceRGB {} CS
[1 0 0] SC
45.45 39.45 m
491.85 385.05 l
S
Q
q
/DeviceGray {} cs
[0] sc
0.5 w
/DeviceGray {} CS
[0] SC
45.45 39.45 m
45.45 43.45 l
f
45.45 39.45 m
45.45 43.45 l
S
45.45 385.05 m
45.45 381.05 l
f
45.45 385.05 m
45.45 381.05 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
36.7 26.325 Td
/F8_0 12 Tf
(0.0)
[7.632
0
3.816
0
7.632
0] Tj
0.5 w
134.73 39.45 m
134.73 43.45 l
f
134.73 39.45 m
134.73 43.45 l
S
134.73 385.05 m
134.73 381.05 l
f
134.73 385.05 m
134.73 381.05 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
126.183125 26.325 Td
/F8_0 12 Tf
(0.2)
[7.632
0
3.816
0
7.632
0] Tj
0.5 w
224.01 39.45 m
224.01 43.45 l
f
224.01 39.45 m
224.01 43.45 l
S
224.01 385.05 m
224.01 381.05 l
f
224.01 385.05 m
224.01 381.05 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
215.1975 26.325 Td
/F8_0 12 Tf
(0.4)
[7.632
0
3.816
0
7.632
0] Tj
0.5 w
313.29 39.45 m
313.29 43.45 l
f
313.29 39.45 m
313.29 43.45 l
S
313.29 385.05 m
313.29 381.05 l
f
313.29 385.05 m
313.29 381.05 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
304.524375 26.325 Td
/F8_0 12 Tf
(0.6)
[7.632
0
3.816
0
7.632
0] Tj
0.5 w
402.57 39.45 m
402.57 43.45 l
f
402.57 39.45 m
402.57 43.45 l
S
402.57 385.05 m
402.57 381.05 l
f
402.57 385.05 m
402.57 381.05 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
393.835625 26.325 Td
/F8_0 12 Tf
(0.8)
[7.632
0
3.816
0
7.632
0] Tj
0.5 w
491.85 39.45 m
491.85 43.45 l
f
491.85 39.45 m
491.85 43.45 l
S
491.85 385.05 m
491.85 381.05 l
f
491.85 385.05 m
491.85 381.05 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
483.357813 26.325 Td
/F8_0 12 Tf
(1.0)
[7.632
0
3.816
0
7.632
0] Tj
[1 0 0 1 0 0] Tm
0 0 Td
213.173438 9.7 Td
/F8_0 12 Tf
(False Positive Rate)
[6.9
0
7.356
0
3.336
0
6.252
0
7.38
0
3.816
0
7.236
0
7.344
0
6.252
0
3.336
0
4.704
0
3.336
0
7.104
0
7.38
0
3.816
0
8.34
0
7.356
0
4.704
0
7.38
0] Tj
0.5 w
45.45 39.45 m
49.45 39.45 l
f
45.45 39.45 m
49.45 39.45 l
S
491.85 39.45 m
487.85 39.45 l
f
491.85 39.45 m
487.85 39.45 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
23.95 36.1375 Td
/F8_0 12 Tf
(0.0)
[7.632
0
3.816
0
7.632
0] Tj
0.5 w
45.45 108.57 m
49.45 108.57 l
f
45.45 108.57 m
49.45 108.57 l
S
491.85 108.57 m
487.85 108.57 l
f
491.85 108.57 m
487.85 108.57 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
24.35625 105.2575 Td
/F8_0 12 Tf
(0.2)
[7.632
0
3.816
0
7.632
0] Tj
0.5 w
45.45 177.69 m
49.45 177.69 l
f
45.45 177.69 m
49.45 177.69 l
S
491.85 177.69 m
487.85 177.69 l
f
491.85 177.69 m
487.85 177.69 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
23.825 174.3775 Td
/F8_0 12 Tf
(0.4)
[7.632
0
3.816
0
7.632
0] Tj
0.5 w
45.45 246.81 m
49.45 246.81 l
f
45.45 246.81 m
49.45 246.81 l
S
491.85 246.81 m
487.85 246.81 l
f
491.85 246.81 m
487.85 246.81 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
23.91875 243.4975 Td
/F8_0 12 Tf
(0.6)
[7.632
0
3.816
0
7.632
0] Tj
0.5 w
45.45 315.93 m
49.45 315.93 l
f
45.45 315.93 m
49.45 315.93 l
S
491.85 315.93 m
487.85 315.93 l
f
491.85 315.93 m
487.85 315.93 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
23.98125 312.6175 Td
/F8_0 12 Tf
(0.8)
[7.632
0
3.816
0
7.632
0] Tj
0.5 w
45.45 385.05 m
49.45 385.05 l
f
45.45 385.05 m
49.45 385.05 l
S
491.85 385.05 m
487.85 385.05 l
f
491.85 385.05 m
487.85 385.05 l
S
1 w
[1 0 0 1 0 0] Tm
0 0 Td
24.465625 381.7375 Td
/F8_0 12 Tf
(1.0)
[7.632
0
3.816
0
7.632
0] Tj
[1 0 0 1 0 0] Tm
0 0 Td
[0 1 -1 0 16.325 159.054688] Tm
0 0 Td
0 0 Td
/F8_0 12 Tf
(True Positive Rate)
[7.332
0
4.932
0
7.608
0
7.38
0
3.816
0
7.236
0
7.344
0
6.252
0
3.336
0
4.704
0
3.336
0
7.104
0
7.38
0
3.816
0
8.34
0
7.356
0
4.704
0
7.38
0] Tj
45.45 385.05 m
491.85 385.05 l
S
491.85 39.45 m
491.85 385.05 l
S
45.45 39.45 m
491.85 39.45 l
S
45.45 39.45 m
45.45 385.05 l
S
/DeviceGray {} cs
[0] sc
[1 0 0 1 0 0] Tm
0 0 Td
147.470313 390.05 Td
/F8_0 14.4 Tf
(Receiver Operating Characteristic)
[10.008
0
8.856
0
7.92
0
8.856
0
4.0032
0
8.5248
0
8.856
0
5.9184
0
4.5792
0
11.3328
0
9.144
0
8.856
0
5.9184
0
8.8272
0
5.6448
0
4.0032
0
9.1296
0
9.144
0
4.5792
0
10.0512
0
9.1296
0
8.8272
0
5.9184
0
8.8272
0
7.92
0
5.6448
0
8.856
0
5.9184
0
4.0032
0
7.5024
0
5.6448
0
4.0032
0
7.92
0] Tj
/DeviceGray {} cs
[1] sc
255.013125 46.65 229.636875 45.81375 re
f
255.013125 46.65 229.636875 45.81375 re
S
2 J
/DeviceRGB {} CS
[0 0 1] SC
265.093125 81.103125 m
285.253125 81.103125 l
S
0 J
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
[1 0 0 1 0 0] Tm
0 0 Td
301.093125 76.063125 Td
/F8_0 14.4 Tf
(SPPS \(AUC = 0.77\))
[9.144
0
8.6832
0
8.6832
0
9.144
0
4.5792
0
5.616
0
9.8496
0
10.5408
0
10.0512
0
4.5792
0
12.0672
0
4.5792
0
9.1584
0
4.5792
0
9.1584
0
9.1584
0
5.616
0] Tj
2 J
/DeviceRGB {} CS
[1 0 0] SC
265.093125 60.35625 m
285.253125 60.35625 l
S
0 J
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
[1 0 0 1 0 0] Tm
0 0 Td
301.093125 55.31625 Td
/F8_0 14.4 Tf
(Immuthera \(AUC = 0.94\))
[4.248
0
14.0256
0
14.0256
0
9.1296
0
5.6448
0
9.1296
0
8.856
0
5.9184
0
8.8272
0
4.5792
0
5.616
0
9.8496
0
10.5408
0
10.0512
0
4.5792
0
12.0672
0
4.5792
0
9.1584
0
4.5792
0
9.1584
0
9.1584
0
5.616
0] Tj
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font T3_8_0
%%EOF
